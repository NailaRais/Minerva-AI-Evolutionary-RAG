name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=minerva --cov-report=xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Check storage footprint
      run: |
        python scripts/utils/check_storage.py --max-size 3.0

  lint:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install linting tools
      run: |
        pip install -e ".[dev]"
    
    - name: Check code formatting (Optional)
      run: |
        black --check minerva/ tests/ scripts/ || echo "Formatting issues found - optional to fix"
    
    - name: Organize imports with isort
      run: |
        isort --check-only minerva/ tests/ scripts/
    
    - name: Run static analysis with flake8
      run: |
        flake8 minerva/ tests/ scripts/
    
    - name: Run type checking with mypy
      run: |
        mypy minerva/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install build dependencies
      run: |
        pip install build
    
    - name: Build package
      run: |
        python -m build
    
    - name: Verify package structure
      run: |
        pip install twine
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/
